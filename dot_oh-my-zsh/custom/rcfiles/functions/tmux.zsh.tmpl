# zsh-native helpers for tmuxp session selection and completion

# Check if a directory exists (after expanding ~)
check_directory() {
  local expanded_path
  expanded_path=${~1}
  [[ -d "$expanded_path" ]]
}

# Completion for `tm` function: suggest tmuxp YAML basenames
_tm_complete() {
  local -a yaml_files filtered basenames
  local config_dir="$HOME/.config/tmuxp"
  yaml_files=(${config_dir}/*.yaml(N))

  for yaml_file in ${yaml_files[@]}; do
    local start_directory
    start_directory=$(yq e -r '.start_directory' "$yaml_file" 2>/dev/null | head -n1 | tr -d '"')
    if [[ -z "$start_directory" ]] || check_directory "$start_directory"; then
      filtered+="$yaml_file"
    fi
  done

  for file in ${filtered[@]}; do
    basenames+="${file:t:r}"
  done

  compadd -- ${basenames[@]}
}
compdef _tm_complete tm

tm() {
  local config_dir="$HOME/.config/tmuxp"

  # If args are provided, pass through to tmux directly
  if (( $# > 0 )); then
    command tmux "$@"
    return
  fi

  # If a tmux server is already running and we're not inside tmux, just attach
  if [[ -z "$TMUX" ]]; then
    if tmux list-sessions >/dev/null 2>&1; then
      if tmux has-session -t Dotfiles >/dev/null 2>&1; then
        tmux attach -t Dotfiles
      else
        tmux attach
      fi
      return
    fi
  fi

  # Collect tmuxp YAMLs and filter by start_directory existence
  local -a yaml_files filtered_yaml
  yaml_files=(${config_dir}/*.yaml(N))

  local yaml_file start_directory
  for yaml_file in ${yaml_files[@]}; do
    start_directory=$(yq e -r '.start_directory' "$yaml_file" 2>/dev/null | head -n1 | tr -d '"')
    if [[ -z "$start_directory" ]] || check_directory "$start_directory"; then
      filtered_yaml+="$yaml_file"
    fi
  done

  if (( ${#filtered_yaml[@]} > 0 )); then
    local sessions config_files
    sessions=$(gum choose --header "Choose which sessions to load" --no-limit ${filtered_yaml[@]})
    # Split gum's newline-separated output into an array
    config_files=(${(f)sessions})

    local config_path
    for config_path in ${config_files[@]}; do
      if [[ -f "$config_path" ]]; then
        tmuxp load -d -- "$config_path"
      fi
    done
    tmux attach -t Dotfiles
  else
    echo "No valid YAML files found in '$config_dir' or start directories do not exist."
  fi
}
